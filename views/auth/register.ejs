


<style>
    /* Import Google font - Poppins */
@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600;700&display=swap");

.container {
  position: relative;
  max-width: 700px;
  width: 100%;
  background: #fff;
  padding: 25px;
  border-radius: 8px;
  box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
}
.container header {
  font-size: 1.5rem;
  color: #333;
  font-weight: 500;
  text-align: center;
}
.container .form {
  margin-top: 30px;
}
.form .input-box {
  width: 100%;
  margin-top: 20px;
}
.input-box label {
  color: #333;
}
.form :where(.input-box input, .select-box) {
  position: relative;
  height: 50px;
  width: 100%;
  outline: none;
  font-size: 1rem;
  color: #707070;
  margin-top: 8px;
  border: 1px solid #ddd;
  border-radius: 6px;
  padding: 0 15px;
}
.input-box input:focus {
  box-shadow: 0 1px 0 rgba(0, 0, 0, 0.1);
}
.form .column {
  display: flex;
  column-gap: 15px;
}
.form .gender-box {
  margin-top: 20px;
}
.gender-box h3 {
  color: #333;
  font-size: 1rem;
  font-weight: 400;
  margin-bottom: 8px;
}
.form :where(.gender-option, .gender) {
  display: flex;
  align-items: center;
  column-gap: 50px;
  flex-wrap: wrap;
}
.form .gender {
  column-gap: 5px;
}
.gender input {
  accent-color: rgb(130, 106, 251);
}
.form :where(.gender input, .gender label) {
  cursor: pointer;
}
.gender label {
  color: #707070;
}
.address :where(input, .select-box) {
  margin-top: 15px;
}
.select-box select {
  height: 100%;
  width: 100%;
  outline: none;
  border: none;
  color: #707070;
  font-size: 1rem;
}
.form button {
  height: 55px;
  width: 100%;
  color: #fff;
  font-size: 1rem;
  font-weight: 400;
  margin-top: 30px;
  border: none;
  cursor: pointer;
  transition: all 0.2s ease;
  background: rgb(130, 106, 251);
}
.form button:hover {
  background: rgb(88, 56, 250);
}
/*Responsive*/
@media screen and (max-width: 500px) {
  .form .column {
    flex-wrap: wrap;
  }
  .form :where(.gender-option, .gender) {
    row-gap: 15px;
  }
}
</style>

<section class="container signup">
  <header>Registration Form</header>
  <form method="post" action="/auth/register" class="form">
    <div class="input-box">
      <!-- <label>Full Name</label> -->
      <input type="text" name="nameOfEntity" placeholder="Name of Entity" required />
    </div>
    <div class="column">
        <div class="select-box">
          <select name="typeOfEntity" class="form-control select" required>
            <option hidden>Select Entity Type</option>
            <option>Individual Resident</option>
            <option>Individual non-Resident</option>
            <option>Government Institution</option>
            <option>Registered Company</option>
          </select>
        </div>
        <!-- <input type="text" placeholder="Enter your city" required /> -->
      </div>
      
      <div class="input-box">
        <!-- <div class="input-box"> -->
          <!-- <label>Phone Number</label> -->
          <input type="text" name="businessRegistrationNumber" placeholder="Enter your Business Registration Number" required />
        <!-- </div> -->
        
    </div>
    <div class="input-box">
        <!-- <label>Email Address</label> -->
        <input type="email" name="email" placeholder="Enter email address" required />
      </div>
  
    
    <div class="input-box address">
        <!-- <label>Address</label> -->
        <input type="number" name="phoneNumber" placeholder="Enter phone number" required />
        <input type="text"  name="address" placeholder="Enter street address " required />


        <div class="column">
            
          <div class="select-box">
            <select name="country" class="form-control select" required>
              <option hidden>Country</option>
              <option value="AF">Afghanistan</option>
              <option value="AL">Albania</option>
              <option value="DZ">Algeria</option>
              <option value="AS">American Samoa</option>
              <option value="AD">Andorra</option>
              <option value="AO">Angola</option>
              <option value="AI">Anguilla</option>
              <option value="AQ">Antarctica</option>
              <option value="AG">Antigua and Barbuda</option>
              <option value="AR">Argentina</option>
              <option value="AM">Armenia</option>
              <option value="AW">Aruba</option>
              <option value="AU">Australia</option>
              <option value="AT">Austria</option>
              <option value="AZ">Azerbaijan</option>
              <option value="BS">Bahamas</option>
              <option value="BH">Bahrain</option>
              <option value="BD">Bangladesh</option>
              <option value="BB">Barbados</option>
              <option value="BY">Belarus</option>
              <option value="BE">Belgium</option>
              <option value="BZ">Belize</option>
              <option value="BJ">Benin</option>
              <option value="BM">Bermuda</option>
              <option value="BT">Bhutan</option>
              <option value="BO">Bolivia</option>
              <option value="BA">Bosnia and Herzegovina</option>
              <option value="BW">Botswana</option>
              <option value="BR">Brazil</option>
              <option value="IO">British Indian Ocean Territory</option>
              <option value="BN">Brunei Darussalam</option>
              <option value="BG">Bulgaria</option>
              <option value="BF">Burkina Faso</option>
              <option value="BI">Burundi</option>
              <option value="CV">Cabo Verde</option>
              <option value="KH">Cambodia</option>
              <option value="CM">Cameroon</option>
              <option value="CA">Canada</option>
              <option value="KY">Cayman Islands</option>
              <option value="CF">Central African Republic</option>
              <option value="TD">Chad</option>
              <option value="CL">Chile</option>
              <option value="CN">China</option>
              <option value="CO">Colombia</option>
              <option value="KM">Comoros</option>
              <option value="CG">Congo</option>
              <option value="CR">Costa Rica</option>
              <option value="HR">Croatia</option>
              <option value="CU">Cuba</option>
              <option value="CY">Cyprus</option>
              <option value="CZ">Czechia</option>
              <option value="DK">Denmark</option>
              <option value="DJ">Djibouti</option>
              <option value="DM">Dominica</option>
              <option value="DO">Dominican Republic</option>
              <option value="EC">Ecuador</option>
              <option value="EG">Egypt</option>
              <option value="SV">El Salvador</option>
              <option value="GQ">Equatorial Guinea</option>
              <option value="ER">Eritrea</option>
              <option value="EE">Estonia</option>
              <option value="SZ">Eswatini</option>
              <option value="ET">Ethiopia</option>
              <option value="FJ">Fiji</option>
              <option value="FI">Finland</option>
              <option value="FR">France</option>
              <option value="GA">Gabon</option>
              <option value="GM">Gambia</option>
              <option value="GE">Georgia</option>
              <option value="DE">Germany</option>
              <option value="GH">Ghana</option>
              <option value="GR">Greece</option>
              <option value="GD">Grenada</option>
              <option value="GT">Guatemala</option>
              <option value="GN">Guinea</option>
              <option value="GW">Guinea-Bissau</option>
              <option value="GY">Guyana</option>
              <option value="HT">Haiti</option>
              <option value="HN">Honduras</option>
              <option value="HU">Hungary</option>
              <option value="IS">Iceland</option>
              <option value="IN">India</option>
              <option value="ID">Indonesia</option>
              <option value="IR">Iran</option>
              <option value="IQ">Iraq</option>
              <option value="IE">Ireland</option>
              <option value="IL">Israel</option>
              <option value="IT">Italy</option>
              <option value="JM">Jamaica</option>
              <option value="JP">Japan</option>
              <option value="JO">Jordan</option>
              <option value="KZ">Kazakhstan</option>
              <option value="KE">Kenya</option>
              <option value="KI">Kiribati</option>
              <option value="KP">Korea (North)</option>
              <option value="KR">Korea (South)</option>
              <option value="KW">Kuwait</option>
              <option value="KG">Kyrgyzstan</option>
              <option value="LA">Lao People's Democratic Republic</option>
              <option value="LV">Latvia</option>
              <option value="LB">Lebanon</option>
              <option value="LS">Lesotho</option>
              <option value="LR">Liberia</option>
              <option value="LY">Libya</option>
              <option value="LI">Liechtenstein</option>
              <option value="LT">Lithuania</option>
              <option value="LU">Luxembourg</option>
              <option value="MG">Madagascar</option>
              <option value="MW">Malawi</option>
              <option value="MY">Malaysia</option>
              <option value="MV">Maldives</option>
              <option value="ML">Mali</option>
              <option value="MT">Malta</option>
              <option value="MH">Marshall Islands</option>
              <option value="MR">Mauritania</option>
              <option value="MU">Mauritius</option>
              <option value="MX">Mexico</option>
              <option value="FM">Micronesia</option>
              <option value="MD">Moldova</option>
              <option value="MC">Monaco</option>
              <option value="MN">Mongolia</option>
              <option value="ME">Montenegro</option>
              <option value="MA">Morocco</option>
              <option value="MZ">Mozambique</option>
              <option value="MM">Myanmar</option>
              <option value="NA">Namibia</option>
              <option value="NR">Nauru</option>
              <option value="NP">Nepal</option>
              <option value="NL">Netherlands</option>
              <option value="NZ">New Zealand</option>
              <option value="NI">Nicaragua</option>
              <option value="NE">Niger</option>
              <option value="NG">Nigeria</option>
              <option value="NO">Norway</option>
              <option value="OM">Oman</option>
              <option value="PK">Pakistan</option>
              <option value="PW">Palau</option>
              <option value="PS">Palestine</option>
              <option value="PA">Panama</option>
              <option value="PG">Papua New Guinea</option>
              <option value="PY">Paraguay</option>
              <option value="PE">Peru</option>
              <option value="PH">Philippines</option>
              <option value="PL">Poland</option>
              <option value="PT">Portugal</option>
              <option value="QA">Qatar</option>
              <option value="RO">Romania</option>
              <option value="RU">Russian Federation</option>
              <option value="RW">Rwanda</option>
              <option value="KN">Saint Kitts and Nevis</option>
              <option value="LC">Saint Lucia</option>
              <option value="VC">Saint Vincent and the Grenadines</option>
              <option value="WS">Samoa</option>
              <option value="SM">San Marino</option>
              <option value="ST">Sao Tome and Principe</option>
              <option value="SA">Saudi Arabia</option>
              <option value="SN">Senegal</option>
              <option value="RS">Serbia</option>
              <option value="SC">Seychelles</option>
              <option value="SL">Sierra Leone</option>
              <option value="SG">Singapore</option>
              <option value="SK">Slovakia</option>
              <option value="SI">Slovenia</option>
              <option value="SB">Solomon Islands</option>
              <option value="SO">Somalia</option>
              <option value="ZA">South Africa</option>
              <option value="SS">South Sudan</option>
              <option value="ES">Spain</option>
              <option value="LK">Sri Lanka</option>
              <option value="SD">Sudan</option>
              <option value="SR">Suriname</option>
              <option value="SE">Sweden</option>
              <option value="CH">Switzerland</option>
              <option value="SY">Syrian Arab Republic</option>
              <option value="TW">Taiwan</option>
              <option value="TJ">Tajikistan</option>
              <option value="TZ">Tanzania</option>
              <option value="TH">Thailand</option>
              <option value="TL">Timor-Leste</option>
              <option value="TG">Togo</option>
              <option value="TO">Tonga</option>
              <option value="TT">Trinidad and Tobago</option>
              <option value="TN">Tunisia</option>
              <option value="TR">Turkey</option>
              <option value="TM">Turkmenistan</option>
              <option value="TV">Tuvalu</option>
              <option value="UG">Uganda</option>
              <option value="UA">Ukraine</option>
              <option value="AE">United Arab Emirates</option>
              <option value="GB">United Kingdom</option>
              <option value="US">United States</option>
              <option value="UY">Uruguay</option>
              <option value="UZ">Uzbekistan</option>
              <option value="VU">Vanuatu</option>
              <option value="VE">Venezuela</option>
              <option value="VN">Viet Nam</option>
              <option value="YE">Yemen</option>
              <option value="ZM">Zambia</option>
              <option value="ZW">Zimbabwe</option>
            </select>
          </div>
          
          <input type="text" name="city" placeholder="Enter your city" required />
        </div>
        <div class="column">
          <input type="password" name="password" placeholder="Password" required />
          <input type="password" placeholder="Confirm Password" required />
        </div>
      </div>

  
   
    <div class="form-group">
        <input type="checkbox" name="agree-term" id="agree-term" class="agree-term" />
        <label for="agree-term" class="label-agree-term"><span><span></span></span>I agree all statements in  <a href="#" class="term-service">Terms of service</a></label>
    </div>
    <div class="form-group form-button">
        <input type="submit" name="signup" id="signup" class="form-submit" value="Register"/>
    </div>
</form>
<div class="signup-image">
    <a href="/"><figure><img src="/img/ZEPRA LOGO.png" alt="sing up image"></figure></a>
    <a href="/auth/login" class="signup-image-link">I am already member</a>
</div>
</section>


<script>
  // Add these styles to your CSS
const styles = `
.error-message {
  color: #dc3545;
  font-size: 0.875rem;
  margin-top: 4px;
  display: none;
}

.input-box.error input,
.input-box.error select {
  border-color: #dc3545;
}

.input-box.error .error-message {
  display: block;
}

.error-summary {
  color: #dc3545;
  background-color: #f8d7da;
  border: 1px solid #f5c6cb;
  border-radius: 4px;
  padding: 12px;
  margin-bottom: 16px;
  display: none;
}

.form-group.error .label-agree-term {
  color: #dc3545;
}
`;

// Add styles to document
const styleSheet = document.createElement("style");
styleSheet.textContent = styles;
document.head.appendChild(styleSheet);

class FormValidator {
  constructor(formElement) {
    this.form = formElement;
    this.errors = new Map();
    
    // Regex patterns
    this.patterns = {
      email: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
      phone: /^\d{10,15}$/,
      password: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/
    };

    // Initialize error containers
    this.setupErrorContainers();
    
    // Add input event listeners for real-time validation
    this.setupInputListeners();
  }

  setupErrorContainers() {
    // Add error container for each input box
    this.form.querySelectorAll('.input-box, .form-group').forEach(box => {
      const errorDiv = document.createElement('div');
      errorDiv.className = 'error-message';
      box.appendChild(errorDiv);
    });

    // Add error summary at the top of the form
    const errorSummary = document.createElement('div');
    errorSummary.className = 'error-summary';
    this.form.insertBefore(errorSummary, this.form.firstChild);
  }

  setupInputListeners() {
    // Add input event listeners for real-time validation
    this.form.querySelectorAll('input, select').forEach(input => {
      input.addEventListener('blur', () => {
        this.validateField(input);
      });

      input.addEventListener('input', () => {
        // Remove error styling when user starts typing
        const container = input.closest('.input-box') || input.closest('.form-group');
        if (container) {
          container.classList.remove('error');
          const errorMessage = container.querySelector('.error-message');
          if (errorMessage) {
            errorMessage.textContent = '';
          }
        }
      });
    });
  }

  showError(field, message) {
    const container = field.closest('.input-box') || field.closest('.form-group');
    if (container) {
      container.classList.add('error');
      const errorMessage = container.querySelector('.error-message');
      if (errorMessage) {
        errorMessage.textContent = message;
      }
    }
    this.errors.set(field.name || field.id, message);
  }

  clearError(field) {
    const container = field.closest('.input-box') || field.closest('.form-group');
    if (container) {
      container.classList.remove('error');
      const errorMessage = container.querySelector('.error-message');
      if (errorMessage) {
        errorMessage.textContent = '';
      }
    }
    this.errors.delete(field.name || field.id);
  }

  updateErrorSummary() {
    const errorSummary = this.form.querySelector('.error-summary');
    if (this.errors.size > 0) {
      const errorList = Array.from(this.errors.values())
        .map(error => `• ${error}`)
        .join('<br>');
      errorSummary.innerHTML = `<strong>Please correct the following errors:</strong><br>${errorList}`;
      errorSummary.style.display = 'block';
    } else {
      errorSummary.style.display = 'none';
    }
  }

  validateField(field) {
    const name = field.name || field.id;
    
    switch(name) {
      case 'nameOfEntity':
        if (!field.value.trim()) {
          this.showError(field, 'Entity name is required');
        } else if (field.value.trim().length < 2) {
          this.showError(field, 'Entity name must be at least 2 characters long');
        } else {
          this.clearError(field);
        }
        break;

      case 'typeOfEntity':
        if (field.value === 'Select Entity Type') {
          this.showError(field, 'Please select an entity type');
        } else {
          this.clearError(field);
        }
        break;

      case 'businessRegistrationNumber':
        if (!field.value.trim()) {
          this.showError(field, 'Business registration number is required');
        } else {
          this.clearError(field);
        }
        break;

      case 'email':
        if (!this.patterns.email.test(field.value)) {
          this.showError(field, 'Please enter a valid email address');
        } else {
          this.clearError(field);
        }
        break;

      case 'phoneNumber':
        if (!this.patterns.phone.test(field.value)) {
          this.showError(field, 'Please enter a valid phone number (10-15 digits)');
        } else {
          this.clearError(field);
        }
        break;

      case 'address':
        if (!field.value.trim()) {
          this.showError(field, 'Street address is required');
        } else {
          this.clearError(field);
        }
        break;

      case 'city':
        if (!field.value.trim()) {
          this.showError(field, 'City is required');
        } else {
          this.clearError(field);
        }
        break;

      case 'country':
        if (!field.value || field.value === 'Country') {
          this.showError(field, 'Please select a country');
        } else {
          this.clearError(field);
        }
        break;

      case 'password':
        if (!this.patterns.password.test(field.value)) {
          this.showError(field, 'Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character');
        } else {
          this.clearError(field);
          // Also validate confirm password if it has a value
          const confirmPassword = this.form.querySelectorAll('input[type="password"]')[1];
          if (confirmPassword.value) {
            this.validateField(confirmPassword);
          }
        }
        break;

      case 'agree-term':
        if (!field.checked) {
          this.showError(field, 'You must agree to the Terms of Service');
        } else {
          this.clearError(field);
        }
        break;
    }

    // Special case for confirm password
    if (field.type === 'password' && field !== this.form.querySelector('input[name="password"]')) {
      const password = this.form.querySelector('input[name="password"]');
      if (field.value !== password.value) {
        this.showError(field, 'Passwords do not match');
      } else {
        this.clearError(field);
      }
    }

    this.updateErrorSummary();
  }

  validate() {
    this.errors.clear();
    
    // Validate all fields
    this.form.querySelectorAll('input, select').forEach(field => {
      this.validateField(field);
    });

    this.updateErrorSummary();
    
    return {
      isValid: this.errors.size === 0,
      errors: Array.from(this.errors.values())
    };
  }
}

// Initialize the validator
document.addEventListener('DOMContentLoaded', () => {
  const form = document.querySelector('form');
  const validator = new FormValidator(form);

  form.addEventListener('submit', (e) => {
    e.preventDefault();
    
    const { isValid, errors } = validator.validate();
    
    if (isValid) {
      // If valid, proceed with form submission
      form.submit();
    }
  });
});
</script>